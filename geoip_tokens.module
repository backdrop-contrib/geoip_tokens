<?php
/**
 * @file
 * GeoIP Tokens module main code.
 */

/**
 * Implements hook_menu().
 *
 * @todo Admin page to en/disable services?
 */
function geoip_tokens_menu() {
  $items['admin/config/system/geoip-settings'] = array(
    'title' => 'GeoIP Tokens',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('geoip_tokens_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items['geoip-tokens/ajax/%'] = array(
    'title' => 'GeoIP Tokens',
    'delivery callback' => 'geoip_tokens_deliver_ajax',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Ajax callback.
 *
 * We silently exit in case our criteria are not met because this page is
 * publicly accessible.
 */
function geoip_tokens_deliver_ajax() {
  if (empty($_POST) || !isset($_POST['geoipTokenRequestToken'])) {
    backdrop_exit();
  }
  // This token is not as secure as a per request generated one, but works for
  // anonymous (without session) and is uniq to this site.
  $valid_token = state_get('geoip_tokens_request_token');
  if ($_POST['geoipTokenRequestToken'] != $valid_token) {
    backdrop_exit();
  }

  $args = arg();
  if (count($args) == 3) {
    switch ($args[2]) {
      case 'latlon':
        $result = geoip_tokens_get_geoip_info('latlon');
        break;

      case 'tzone':
        $result = geoip_tokens_get_geoip_info('timezone');
        break;

      case 'ccode':
        $result = geoip_tokens_get_geoip_info('country_code');
        break;

      default:
        backdrop_exit();
    }
  }
  else {
    backdrop_exit();
  }
  backdrop_json_deliver($result);
}

/**
 * Page callback for settings form.
 */
function geoip_tokens_admin_settings_form($form, &$form_state) {
  $config = config('geoip_tokens.settings');
  $form['#config'] = 'geoip_tokens.settings';

  $tokens = '[geoip_tokens:country_code], [geoip_tokens:latitude], [geoip_tokens:longitude], [geoip_tokens:timezone]';
  $demo = '<p>' . token_replace($tokens) . '</p>';
  $form['demo'] = array(
    '#type' => 'markup',
    '#markup' => t('Demo values for your IP:') . $demo,
  );
  $form['cache_days'] = array(
    '#type' => 'number',
    '#title' => t('Number of days to keep the cached results'),
    '#description' => t('Caching results locally saves external requests, but after some time they might get outdated.'),
    '#min' => 3,
    '#max' => 60,
    '#default_value' => $config->get('cache_days'),
  );
  $available = geoip_tokens_providers();
  $options = backdrop_map_assoc(array_keys($available));
  // Checkboxes are a bit odd regarding saved values, but handy.
  $form['providers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled providers'),
    '#description' => t('Uncheck to not use a provider from this list.'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => $config->get('providers'),
  );
  return system_settings_form($form);
}

/**
 * Returns information either from cache or from external request.
 *
 * @param string $type
 *   The requested type of information, defaults to "all".
 *   Available types: 'all', 'latlon', 'country_code', 'timezone'.
 *
 * @return array|bool
 *   Associative array of information, FALSE if no result retrieved.
 */
function geoip_tokens_get_geoip_info($type = 'all') {
  $ip = ip_address();
  $anon_ip = geoip_tokens_anonymize_ip($ip);
  $cache_hit = db_query('SELECT * FROM {geoip_tokens_cache} WHERE anon_ip = :anon_ip', array(
    ':anon_ip' => $anon_ip,
  ))->fetchAssoc();

  // If not found in local cache, do an external request.
  if (!$cache_hit) {
    $result = geoip_tokens_retrieve_external($anon_ip);
    if (!$result) {
      return FALSE;
    }
  }
  else {
    $result = $cache_hit;
  }

  // Filter to return the requested data.
  if ($type == 'latlon') {
    $keys = array('latitude', 'longitude');
  }
  elseif ($type == 'country_code' || $type == 'timezone') {
    $keys = array($type);
  }
  else {
    $keys = array('country_code', 'latitude', 'longitude', 'timezone');
  }
  $filtered = array_filter($result, function ($key) use ($keys) {
    return in_array($key, $keys);
  }, ARRAY_FILTER_USE_KEY);

  return $filtered;
}

/**
 * Strips off the last octet to comply to privacy requirements.
 *
 * @param string $ip
 *   Ipv4 or ipv6 address (required).
 *
 * @return string
 *   Anonymized IP.
 */
function geoip_tokens_anonymize_ip($ip) {
  // @todo Use constants for netmasks?
  $ipv4_netmask = '255.255.255.0';
  $ipv6_netmask = 'ffff:ffff:ffff:ffff:0000:0000:0000:0000';
  if (strpos($ip, ':') === FALSE) {
    return inet_ntop(inet_pton($ip) & inet_pton($ipv4_netmask));
  }
  else {
    return inet_ntop(inet_pton($ip) & inet_pton($ipv6_netmask));
  }
}

/**
 * Does external request to a provider, saves result in database.
 *
 * @param string $ip
 *   Ip address (anonymized) to request information for.
 *
 * @return array|bool
 *   Associative array of retrieved values, FALSE on error.
 */
function geoip_tokens_retrieve_external($ip) {
  // @todo Use a static cache?
  $allproviders = geoip_tokens_providers();

  $config = config_get('geoip_tokens.settings', 'providers');
  $providers = array();
  // Filter out disabled providers.
  foreach ($allproviders as $name => $settings) {
    if (!$config[$name]) {
      continue;
    }
    else {
      $providers[$name] = $settings;
    }
  }

  $current_provider = array_rand($providers);
  $url = str_replace('__IP__', $ip, $providers[$current_provider]['urlpattern']);
  $data = FALSE;

  $response = backdrop_http_request($url);
  // Make sure we catch errors and inform the admin.
  $response_code = $response->code;
  if (isset($response->error)) {
    watchdog('geoip_tokens', 'HTTP request to @url failed with error: @error.', array(
      '@url' => $url,
      '@error' => $response->error,
    ));
  }
  // @todo What about 301/302?
  elseif ($response_code == '200' && isset($response->data)) {
    $remote_data = json_decode($response->data, TRUE);
    $field_defs = $providers[$current_provider]['field_names'];
    $data['provider'] = $current_provider;
    $data['anon_ip'] = $ip;
    $data['created'] = REQUEST_TIME;

    // Field name replacements according to provider definition.
    foreach ($field_defs as $name => $remote_name) {
      $data[$name] = $remote_data[$remote_name];
    }
    // Cache result locally.
    db_insert('geoip_tokens_cache')->fields($data)->execute();
  }

  return $data;
}

/**
 * Returns a list of all available api providers.
 */
function geoip_tokens_providers() {
  $providers = array(
    'ipapi.co' => array(
      'urlpattern' => 'https://ipapi.co/__IP__/json/',
      'field_names' => array(
        'country_code' => 'country_code',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'timezone' => 'timezone',
      ),
    ),
    'reallyfreegeoip.org' => array(
      'urlpattern' => 'https://reallyfreegeoip.org/json/__IP__',
      'field_names' => array(
        'country_code' => 'country_code',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'timezone' => 'time_zone',
      ),
    ),
    'get.geojs.io' => array(
      'urlpattern' => 'https://get.geojs.io/v1/ip/geo/__IP__.json',
      'field_names' => array(
        'country_code' => 'country_code',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'timezone' => 'timezone',
      ),
    ),
  );
  // @todo module_implements? How to create the admin page then?
  return $providers;
}

/**
 * Implements hook_cron().
 *
 * Remove old entries from the database as they might be outdated.
 * Periodically refresh the request token for ajax.
 */
function geoip_tokens_cron() {
  $cache_days = config_get('geoip_tokens.settings', 'cache_days');
  if (!isset($cache_days)) {
    $cache_days = 30;
  }
  $timestamp = time() - (86400 * $cache_days);
  db_delete('geoip_tokens_cache')
    ->condition('created', $timestamp, '<')
    ->execute();

  $last_refreshed = state_get('geoip_tokens_request_token_refreshed');
  if (!isset($last_refreshed) || $last_refreshed < REQUEST_TIME - (86400 * 14)) {
    $new_token = backdrop_random_key();
    state_set('geoip_tokens_request_token', $new_token);
    state_set('geoip_tokens_request_token_refreshed', REQUEST_TIME);
    // @todo Verify that this is necessary on cron runs.
    cache_flush('page');
  }
}

/**
 * Implements hook_config_info().
 */
function geoip_tokens_config_info() {
  $prefixes['geoip_tokens.settings'] = array(
    'label' => t('GeoIP Tokens Settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
